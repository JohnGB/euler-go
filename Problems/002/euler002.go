/*
Each new term in the Fibonacci sequence is generated by adding the previous
two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed
four million, find the sum of the even-valued terms.
*/

// package main //same package name as source file
package euler002 //same package name as source file

import (
	"fmt"
	"time"
)

// Used to time other functions to compare speed
func timeTrack(start time.Time, name string) {
	elapsed := time.Since(start)
	fmt.Printf("%s took %s \n", name, elapsed)
}

// Returns the nth fibonacci number
func fib(num int) int {
	// defer timeTrack(time.Now(), "fib") // Timer function
	if num == 1 {
		return 1
	}
	if num == 2 {
		return 2
	}

	a, b := 1, 2
	for i := 1; i <= num-2; i++ {
		a, b = b, a+b
	}
	// fmt.Printf("Fibonacci(%d) = %d\n", num, b)
	return b
}

func countFibEven1(num int) int {
	// defer timeTrack(time.Now(), "CountFibEven1") // Timer function

	sum := 0
	fibnum := 0
	for i := 1; i < num; i++ { // Use some big number to limit the loop
		fibnum = fib(i)
		if fibnum > num {
			return sum
		}
		if fibnum%2 == 0 { // If fibnum is even
			sum += fibnum
		}
	}
	return 0
}

func countFibEven2(num int) int {
	// defer timeTrack(time.Now(), "CountFibEven2") // Timer function

	sum := 0
	fibnum := 0
	for i := 2; i < num; i += 3 { // Use some big number to limit the loop
		fibnum = fib(i)
		if fibnum > num {
			return sum
		}
		sum += fibnum
	}
	return 0
}

func countFibEven3(num int) int {
	// defer timeTrack(time.Now(), "CountFibEven3") // Timer function

	sum := 0
	i := 1

	for fibnum := fib(i); fibnum < num; fibnum = fib(i) {
		if fibnum%2 == 0 {
			sum += fibnum
		}
		i += 1
	}
	return sum
}

func countFibEven4(num int) int {
	// defer timeTrack(time.Now(), "CountFibEven4") // Timer function

	sum := 0
	i := 2
	for fibnum := fib(i); fibnum < num; fibnum = fib(i) {
		sum += fibnum
		i += 3
	}
	return sum
}

func countFibEven5(num int) int {
	// defer timeTrack(time.Now(), "CountFibEven5") // Timer function

	sum := 0
	i := 2
	fibnum := 0
	for {
		fibnum = fib(i)
		// if fibnum is too large, exit the loop and return the answer
		if fibnum >= num {
			return sum
		}
		sum += fibnum
		i += 3
	}
	return 1
}

func countFibEven6(num int) int {
	// defer timeTrack(time.Now(), "CountFibEven6") // Timer function
	if num == 1 {
		return 0
	}
	if num == 2 {
		return 2
	}
	sum := 0
	a, b := 1, 2
	for {

		if b > num {
			return sum
		}

		if b%2 == 0 {
			sum += b
		}

		a, b = b, a+b

	}
	return 0
}

func countFibEven7(num int) int {
	// defer timeTrack(time.Now(), "CountFibEven7") // Timer function
	if num == 1 {
		return 0
	}
	if num == 2 {
		return 2
	}
	sum := 0
	a, b := 1, 2
	for {
		// check that b is in range
		if b > num {
			return sum
		}
		// add b to counter
		sum += b

		// every third fibonacci number is even, so do 3 iterations
		a, b = b, a+b
		a, b = b, a+b
		a, b = b, a+b

	}
	return 0
}

func countFibEven8(num int) int {
	// defer timeTrack(time.Now(), "CountFibEven8") // Timer function
	if num == 1 {
		return 0
	}
	if num == 2 {
		return 2
	}
	sum := 0
	a, b := 1, 2
	for {
		// check that b is in range
		if b > num {
			return sum
		}
		// add b to counter
		sum += b

		// every third fibonacci number is even, so do 3 iterations
		// expanding out, gets the b3 = 2*a0 + 3*b0, a3 = a0 + 2*b0
		a, b = a+2*b, 2*a+3*b
	}
	return 0
}

func main() {
	const n = 4e6

	// fmt.Printf("%d\n", countFibEven1(n))
	// fmt.Printf("%d\n", countFibEven2(n))
	// fmt.Printf("%d\n", countFibEven3(n))
	// fmt.Printf("%d\n", countFibEven4(n))
	// fmt.Printf("%d\n", countFibEven5(n))
	// fmt.Printf("%d\n", countFibEven6(n))
	// fmt.Printf("%d\n", countFibEven7(n))
	// fmt.Printf("%d\n", countFibEven8(n))

	countFibEven1(n)
	countFibEven2(n)
	countFibEven3(n)
	countFibEven4(n)
	countFibEven5(n)
	countFibEven6(n)
	countFibEven7(n)
	countFibEven8(n)
}
