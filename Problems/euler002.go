/*
Each new term in the Fibonacci sequence is generated by adding the previous
two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed
four million, find the sum of the even-valued terms.
*/

package main

import (
	"fmt"
	"time"
)

// Used to time other functions to compare speed
func timeTrack(start time.Time, name string) {
	elapsed := time.Since(start)
	fmt.Printf("%s took %s \n", name, elapsed)
}

// Returns the nth fibonacci number
func fib(num int) int {
	// defer timeTrack(time.Now(), "fib") // Timer function
	if num == 1 {
		return 1
	}
	if num == 2 {
		return 2
	}

	a, b := 1, 2
	for i := 1; i <= num-2; i++ {
		a, b = b, a+b
	}
	// fmt.Printf("Fibonacci(%d) = %d\n", num, b)
	return b
}

func countFibEven1(num int) int {
	defer timeTrack(time.Now(), "CountFibEven1") // Timer function

	sum := 0
	fibnum := 0
	for i := 1; i < num; i++ { // Use some big number to limit the loop
		fibnum = fib(i)
		if fibnum > num {
			return sum
		}
		if fibnum%2 == 0 { // If fibnum is even
			sum += fibnum
		}
	}
	return 0
}

func countFibEven2(num int) int {
	defer timeTrack(time.Now(), "CountFibEven2") // Timer function

	sum := 0
	fibnum := 0
	for i := 2; i < num; i += 3 { // Use some big number to limit the loop
		fibnum = fib(i)
		if fibnum > num {
			return sum
		}
		if fibnum%2 == 0 { // If fibnum is even
			sum += fibnum
		}
	}
	return 0
}

func countFibEven3(num int) int {
	defer timeTrack(time.Now(), "CountFibEven3") // Timer function

	sum := 0
	i := 2
	for fibnum := fib(i); fibnum < num; fibnum = fib(i) { // Use some big number to limit the loop
		sum += fibnum
		i += 3
	}
	return sum
}

func main() {
	fmt.Printf("fib = %d\n", fib(50))
	fmt.Printf("CountFibEven1 = %d\n", countFibEven1(4e6))
	fmt.Printf("CountFibEven2 = %d\n", countFibEven2(4e6))
	fmt.Printf("CountFibEven3 = %d\n", countFibEven3(4e6))
}
